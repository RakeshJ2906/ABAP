***************************************Global Class*****************************************
CLASS ztest_class_rj DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES if_oo_adt_classrun .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS ztest_class_rj IMPLEMENTATION.

  METHOD if_oo_adt_classrun~main.

    DATA connection TYPE REF TO lcl_connection.

* Class always returns the same object for the same combination of airline and flight number

    connection = lcl_connection=>get_connection( airlineid = 'LH' connectionnumber = '0400' ).

    connection = lcl_connection=>get_connection( airlineid = 'LH' connectionnumber = '0400' ).

    connection->flight_info( IMPORTING airlineid = DATA(airline_id) connectionnumber = DATA(connection_no)
                                       fromairport = DATA(from_airport) toairport = DATA(to_airport) ).

    out->write( | Airline ID: { airline_id } | ).
    out->write( | Connection ID: { connection_no } | ).
    out->write( | From Airport: { from_airport } | ).
    out->write( | To Airport: { to_airport } | ).

  ENDMETHOD.

ENDCLASS.

***************************************Local Class*****************************************

CLASS lcl_connection DEFINITION CREATE PRIVATE.
  PUBLIC SECTION.

    METHODS constructor
      IMPORTING
        airlineid        TYPE /dmo/carrier_id
        connectionnumber TYPE /dmo/connection_id
        fromAirport      TYPE /dmo/airport_from_id
        toAirport        TYPE /dmo/airport_to_id.

    CLASS-METHODS get_connection IMPORTING airlineId            TYPE /dmo/carrier_id
                                           connectionNumber     TYPE /dmo/connection_id
                                 RETURNING VALUE(ro_connection) TYPE REF TO lcl_Connection.

    METHODS flight_info EXPORTING airlineid        TYPE /dmo/carrier_id
                                  connectionnumber TYPE /dmo/connection_id
                                  fromAirport      TYPE /dmo/airport_from_id
                                  toAirport        TYPE /dmo/airport_to_id.

  PRIVATE SECTION.

    TYPES: BEGIN OF ts_instance,
             airlineId        TYPE /dmo/carrier_id,
             connectionNumber TYPE /dmo/connection_id,
             object           TYPE REF TO lcl_connection,
           END OF ts_instance,
           tt_instances TYPE HASHED TABLE OF ts_instance
                        WITH UNIQUE KEY airlineId ConnectionNumber.

    DATA AirlineId TYPE /dmo/carrier_id.
    DATA ConnectionNumber TYPE /dmo/connection_id.
    DATA fromAirport TYPE /dmo/airport_from_id.
    DATA toAirport TYPE /dmo/airport_to_id.
    CLASS-DATA connections TYPE tt_instances.
ENDCLASS.


CLASS lcl_connection IMPLEMENTATION.

  METHOD constructor.
    me->airlineid = airlineid.
    me->connectionnumber = connectionnumber.
    me->fromAirport = fromAirport.
    me->toAirport = toAirport.
  ENDMETHOD.

  METHOD get_connection.
    DATA fromAirport TYPE /dmo/airport_from_id.
    DATA toAirport TYPE /dmo/airport_to_id.

    IF NOT line_exists( connections[ airlineid = airlineid connectionnumber = connectionnumber ] ).
      SELECT SINGLE FROM /dmo/connection
      FIELDS airport_from_id, airport_to_id
      WHERE carrier_id = @airlineid
      AND connection_id = @connectionnumber
      INTO ( @fromAirport, @toAirport ).


      ro_connection = NEW #( airlineid = airlineid connectionnumber = connectionnumber
                             fromairport = fromairport toairport = toairport ).
      DATA(new_instance) = VALUE ts_instance( airlineId = airlineId connectionnumber = connectionnumber
                                              object = ro_connection ).
      INSERT new_instance INTO TABLE connections.
    ELSE.
      ro_connection = connections[ airlineId = airlineId connectionnumber = connectionnumber ]-object.
    ENDIF.

  ENDMETHOD.

  METHOD flight_info.

  airlineid = me->airlineid.
  connectionnumber = me->connectionnumber.
  fromairport = me->fromairport.
  toairport = me->toairport.

  ENDMETHOD.

ENDCLASS.
