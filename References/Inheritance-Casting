******************************************Global Class*******************************************
CLASS ztest_class_rj DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES if_oo_adt_classrun .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS ztest_class_rj IMPLEMENTATION.

  METHOD if_oo_adt_classrun~main.

    DATA passenger TYPE REF TO lcl_passenger_Plane.
    DATA cargo TYPE REF TO lcl_cargo_plane.
    DATA plane TYPE REF TO lcl_Plane.

    passenger = NEW #( iv_manufacturer = 'BOEING' iv_type = '737-800' iv_seats = 130 ) .
    cargo = NEW #( iv_manufacturer = 'AIRBUS' iv_type = 'A340' iv_cargo = 60000 ).

    out->write( 'Output using passenger plane object reference' ).
    out->write( passenger->get_attributes( ) ).


    plane = passenger.     "Up-Cast

    out->write( 'Output using superclass object reference' ).
    out->write( plane->get_attributes( ) ).


* Can't use the superclass reference to get the number of seats of the
* passenger plane, because the relevant method isn't declared in the superclass.

* plane->get_seats( ).


* Can't assign the plane directly to a passenger plane reference variable, because
* not every plane is a passenger plane.

*passenger = plane.        "direct Down-Cast


"Securing Down-Cast
* Make sure the plane is actually a passenger plane, then force the cast.
    IF plane IS INSTANCE OF lcl_passenger_plane.
      passenger = CAST #( plane ).
      out->write( 'Output using subclass object reference' ).
      out->write( plane->get_attributes( ) ).
    ENDIF.

  ENDMETHOD.

ENDCLASS.

******************************************Local Class*******************************************

CLASS lcl_plane DEFINITION.
  PUBLIC SECTION.
    TYPES: BEGIN OF ts_attributes,
             name  TYPE string,
             value TYPE string,
           END OF ts_attributes,

* declare table - do not allow the same attribute to be used more than once
           tt_attributes TYPE SORTED TABLE OF ts_attributes WITH UNIQUE KEY name.


    METHODS constructor IMPORTING iv_manufacturer TYPE string
                                  iv_type         TYPE string.
    METHODS: get_Attributes RETURNING VALUE(rt_Attributes) TYPE tt_attributes.


  PROTECTED SECTION.
    DATA manufacturer TYPE string.
    DATA type TYPE string.

  PRIVATE SECTION.

ENDCLASS.


CLASS lcl_plane IMPLEMENTATION.

  METHOD constructor.
    manufacturer = iv_manufacturer.
    type = iv_type.
  ENDMETHOD.

  METHOD get_attributes.
    rt_attributes = VALUE #( ( name = 'MANUFACTURER' value = manufacturer )
                             ( name = 'TYPE' value = type ) ) .
  ENDMETHOD.

ENDCLASS.


CLASS lcl_cargo_plane DEFINITION INHERITING FROM lcl_plane.

  PUBLIC SECTION.
    METHODS constructor IMPORTING iv_manufacturer TYPE string
                                  iv_type         TYPE string
                                  iv_cargo        TYPE i.
    METHODS get_attributes REDEFINITION.

  PRIVATE SECTION.
    DATA cargo TYPE i.
ENDCLASS.


CLASS lcl_cargo_plane IMPLEMENTATION.

  METHOD constructor.
    super->constructor( iv_manufacturer = iv_manufacturer iv_type = iv_type ).
    cargo = iv_cargo.
  ENDMETHOD.


  METHOD get_attributes.
* method uses protected attributes of superclass
    rt_attributes = VALUE #( ( name = 'MANUFACTURER' value = manufacturer )
                             ( name = 'TYPE' value = type )
                             ( name ='CARGO' value = cargo ) ).
  ENDMETHOD.

ENDCLASS.


CLASS lcl_passenger_plane DEFINITION INHERITING FROM lcl_Plane.

  PUBLIC SECTION.
    METHODS constructor IMPORTING iv_manufacturer TYPE string
                                  iv_type         TYPE string
                                  iv_seats        TYPE i.
    METHODS get_Attributes REDEFINITION.

  PRIVATE SECTION.
    DATA seats TYPE i.
ENDCLASS.


CLASS lcl_passenger_plane IMPLEMENTATION.

  METHOD constructor.
    super->constructor( iv_manufacturer = iv_manufacturer iv_type = iv_type ).
    seats = iv_seats.
  ENDMETHOD.


  METHOD get_attributes.
* Redefinition uses call of superclass implementation
    rt_attributes = super->get_attributes( ).
    rt_Attributes = VALUE #( BASE rt_attributes ( name = 'SEATS' value = seats ) ).
  ENDMETHOD.

ENDCLASS.
