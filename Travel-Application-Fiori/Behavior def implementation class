CLASS lsc_zrap_iv_travel DEFINITION INHERITING FROM cl_abap_behavior_saver.

  PROTECTED SECTION.

    METHODS adjust_numbers REDEFINITION.

ENDCLASS.

CLASS lsc_zrap_iv_travel IMPLEMENTATION.

  METHOD adjust_numbers.

    DATA: lv_travelid_max    TYPE /dmo/travel_id,
          lv_bookid_max      TYPE /dmo/booking_id,
          lv_booksupplid_max TYPE /dmo/booking_supplement_id,
          nr_maintained      TYPE abap_bool VALUE abap_false.

*************************************ID Creation for Travel instance******************************************

    IF mapped-travel IS NOT INITIAL.
      DATA(lt_travel) = mapped-travel.
      "Remove instance data which are already having defined travel id
      DELETE lt_travel WHERE TravelId IS NOT INITIAL.
    ENDIF.

    IF lt_travel IS NOT INITIAL.
      IF nr_maintained = abap_true.              "Number Range Maintained in the system..
        TRY.
            cl_numberrange_runtime=>number_get(
              EXPORTING
                nr_range_nr       = '01'
                object            = '/DMO/TRV_M'
                quantity          = CONV #( lines( lt_travel ) )
              IMPORTING
                number            = DATA(lv_avl_num)
                returncode        = DATA(lv_returncode)
                returned_quantity = DATA(lv_return_qty)
            ).
          CATCH cx_nr_object_not_found INTO DATA(le_notfound).
          CATCH cx_number_ranges INTO DATA(le_nranges).
            LOOP AT lt_travel INTO DATA(ls_data).
              APPEND VALUE #( %key = ls_data-%key
                              %msg = COND #( WHEN le_notfound IS NOT INITIAL
                                             THEN le_notfound
                                             WHEN le_nranges IS NOT INITIAL
                                             THEN le_nranges ) ) TO reported-travel.
            ENDLOOP.
            EXIT.
        ENDTRY.

        ASSERT lv_return_qty = lines( lt_travel ).
        lv_travelid_max = lv_avl_num - lv_return_qty.

      ELSE.
        "Get Max Travel Id from active table
        SELECT SINGLE FROM zrap_tb_travel FIELDS MAX( travel_id ) INTO @lv_travelid_max.
        "Get Max Travel Id from draft table
        SELECT SINGLE FROM zrap_dtb_travel FIELDS MAX( travelid ) INTO @DATA(lv_dtravelid_max).
        IF lv_dtravelid_max > lv_travelid_max.
          lv_travelid_max = lv_dtravelid_max.
        ENDIF.
      ENDIF.
    ENDIF.

    LOOP AT lt_travel INTO DATA(ls_travel).
      lv_travelid_max += 1.
      APPEND VALUE #( %pid = ls_travel-%pid
                      travelid = lv_travelid_max ) TO mapped-travel.
    ENDLOOP.

*************************************ID Creation for Booking instance******************************************

    IF mapped-booking IS NOT INITIAL.
      DATA(lt_booking_instances) = mapped-booking.
      "Remove instance data which are already having defined travel id
      DELETE lt_booking_instances WHERE BookingId IS NOT INITIAL.
    ENDIF.

    IF lt_booking_instances IS NOT INITIAL.

      READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
      ENTITY Travel BY \_Booking
      FIELDS ( BookingId )
      WITH VALUE #( FOR ls_instance IN lt_booking_instances
                    ( TravelId = ls_instance-%tmp-TravelId ) )
      RESULT DATA(lt_bookings).

      lv_bookid_max = REDUCE #( INIT lv_max = CONV /dmo/booking_id( '0' )
                                FOR ls_booking IN lt_bookings
                                NEXT lv_max = ls_booking-BookingId ).

      LOOP AT mapped-booking ASSIGNING FIELD-SYMBOL(<fs_booking>) WHERE BookingId IS INITIAL.
        lv_bookid_max += 1.
        <fs_booking>-TravelId = <fs_booking>-%tmp-TravelId.
        <fs_booking>-BookingId = lv_bookid_max.
      ENDLOOP.

    ENDIF.

*************************************ID Creation for Book Suppl instance******************************************

    IF mapped-booksuppl IS NOT INITIAL.
      DATA(lt_booksuppl_ins) = mapped-booksuppl.
      "Remove instance data which are already having defined travel id
      DELETE lt_booksuppl_ins WHERE BookingSupplementId IS NOT INITIAL.
    ENDIF.

    IF lt_booksuppl_ins IS NOT INITIAL.

      READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
      ENTITY Booking BY \_BookSuppl
      FIELDS ( BookingSupplementId )
      WITH VALUE #( FOR ls_ins IN lt_booksuppl_ins
                    ( TravelId = ls_ins-%tmp-TravelId
                      BookingId = ls_ins-%tmp-BookingId ) )
      RESULT DATA(lt_book_suppls).

      lv_booksupplid_max = REDUCE #( INIT lv_max = CONV /dmo/booking_id( '0' )
                                     FOR ls_booksuppl IN lt_book_suppls
                                     NEXT lv_max = ls_booksuppl-BookingSupplementId ).

      LOOP AT mapped-booksuppl ASSIGNING FIELD-SYMBOL(<fs_booksuupl>) WHERE BookingSupplementId IS INITIAL.
        lv_booksupplid_max += 1.
        <fs_booksuupl>-TravelId = <fs_booksuupl>-%tmp-TravelId.
        <fs_booksuupl>-BookingId = <fs_booksuupl>-%tmp-BookingId.
        <fs_booksuupl>-BookingSupplementId = lv_booksupplid_max.
      ENDLOOP.

    ENDIF.
  ENDMETHOD.

ENDCLASS.

******Behavior Class Definitions******

CLASS lhc_Travel DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    CONSTANTS:
      BEGIN OF travel_status,
        open     TYPE c LENGTH 1 VALUE 'O', "Open
        accepted TYPE c LENGTH 1 VALUE 'A', "Accepted
        rejected TYPE c LENGTH 1 VALUE 'X', "Cancelled
      END OF travel_status.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.

*    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION
*      IMPORTING REQUEST requested_authorizations FOR Travel RESULT result.

    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR Travel RESULT result.

    METHODS acceptTravel FOR MODIFY
      IMPORTING keys FOR ACTION Travel~acceptTravel RESULT result.

    METHODS bookingfeeDiscount FOR MODIFY
      IMPORTING keys FOR ACTION Travel~bookingfeeDiscount RESULT result.

    METHODS recalcTotalPrice FOR MODIFY
      IMPORTING keys FOR ACTION Travel~recalcTotalPrice.

    METHODS rejectTravel FOR MODIFY
      IMPORTING keys FOR ACTION Travel~rejectTravel RESULT result.

    METHODS GetDefaultsForCreate FOR READ
      IMPORTING keys FOR FUNCTION Travel~GetDefaultsForCreate RESULT result.
    METHODS calculateTotalPrice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR Travel~calculateTotalPrice.
    METHODS validateAgency FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateAgency.

    METHODS validateCustomer FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateCustomer.

    METHODS validateDates FOR VALIDATE ON SAVE
      IMPORTING keys FOR Travel~validateDates.
    METHODS copyRecord FOR MODIFY
      IMPORTING keys FOR ACTION Travel~copyRecord.

ENDCLASS.

CLASS lhc_booking DEFINITION INHERITING FROM cl_abap_behavior_handler.

  PRIVATE SECTION.

    METHODS calculateTotalPrice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR Booking~calculateTotalPrice.
    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR Booking RESULT result.

ENDCLASS.

CLASS lhc_booksuppl DEFINITION INHERITING FROM cl_abap_behavior_handler.

  PRIVATE SECTION.

    METHODS calculateTotalPrice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR BookSuppl~calculateTotalPrice.

ENDCLASS.

******Behavior Class Implementations******

CLASS lhc_Travel IMPLEMENTATION.

  METHOD get_instance_authorizations.
  ENDMETHOD.

*  METHOD get_global_authorizations.
*  ENDMETHOD.

  METHOD get_instance_features.

    "Get Travel instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    FIELDS ( TravelStatus ) WITH CORRESPONDING #( keys )
    RESULT DATA(travels)
    FAILED failed.

    "Fill response
    result = VALUE #( FOR travel IN travels
                      LET ls_accepted = COND #( WHEN travel-TravelStatus = travel_status-accepted
                                                THEN if_abap_behv=>fc-o-disabled
                                                ELSE if_abap_behv=>fc-o-enabled )
                          ls_rejected = COND #( WHEN travel-TravelStatus = travel_status-rejected
                                                THEN if_abap_behv=>fc-o-disabled
                                                ELSE if_abap_behv=>fc-o-enabled )
                          ls_discount = COND #( WHEN travel-TravelStatus = travel_status-open
                                                THEN if_abap_behv=>fc-o-enabled
                                                ELSE if_abap_behv=>fc-o-disabled )
                      IN ( %tky = travel-%tky
                           %action-acceptTravel = ls_accepted
                           %action-rejectTravel = ls_rejected
                           %action-bookingfeeDiscount = ls_discount
                           %assoc-_Booking = ls_rejected )
                    ).

  ENDMETHOD.

  METHOD acceptTravel.

    "Set the status
    MODIFY ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    UPDATE FIELDS ( TravelStatus )
    WITH VALUE #( FOR key IN keys
                  ( %tky = key-%tky
                    TravelStatus = travel_status-accepted ) )
    FAILED failed
    REPORTED reported.

    "Fill Response
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(travels).

    result = VALUE #( FOR travel IN travels
                      ( %tky = travel-%tky
                        %param = travel ) ).

  ENDMETHOD.

  METHOD rejectTravel.

    "Set the status
    MODIFY ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    UPDATE FIELDS ( TravelStatus )
    WITH VALUE #( FOR key IN keys
                  ( %tky = key-%tky
                    TravelStatus = travel_status-rejected ) )
    FAILED failed
    REPORTED reported.

    "Fill Response
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(travels).

    result = VALUE #( FOR travel IN travels
                      ( %tky = travel-%tky
                        %param = travel ) ).

  ENDMETHOD.

  METHOD copyRecord.

    DATA: lt_travel        TYPE TABLE FOR CREATE zrap_iv_travel,
          lt_booking_cba   TYPE TABLE FOR CREATE zrap_iv_travel\_Booking,
          lt_booksuppl_cba TYPE TABLE FOR CREATE zrap_iv_booking\_BookSuppl.

    "Consider the instances only when they have CID..
    DATA(ls_without_cid) = VALUE #( keys[ %cid = space ] OPTIONAL ).
    ASSERT ls_without_cid IS INITIAL.

    "Get Corresponding Travel instance data..
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(lt_travel_c)
    FAILED failed.

    "Get Corresponding Booking instance data..
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel BY \_Booking
    ALL FIELDS WITH CORRESPONDING #( lt_travel_c )
    RESULT DATA(lt_bookings_c).

    "Get Corresponding Booking Supplement instance data..
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Booking BY \_BookSuppl
    ALL FIELDS WITH CORRESPONDING #( lt_bookings_c )
    RESULT DATA(lt_booksuppl_c).

    LOOP AT lt_travel_c INTO DATA(ls_travel).

      "Fill Travel instance data..
      APPEND VALUE #( %cid = keys[ KEY entity TravelId = ls_travel-TravelId ]-%cid
                      %data = CORRESPONDING #( ls_travel EXCEPT TravelId ) )
        TO lt_travel ASSIGNING FIELD-SYMBOL(<fs_travel>).
      <fs_travel>-BeginDate = cl_abap_context_info=>get_system_date( ).
      <fs_travel>-EndDate = cl_abap_context_info=>get_system_date( ) + 30.
      <fs_travel>-TravelStatus = 'O'.

      "Fill Booking details..
      APPEND VALUE #( %cid_ref = <fs_travel>-%cid ) TO lt_booking_cba ASSIGNING FIELD-SYMBOL(<fs_booking>).
      LOOP AT lt_bookings_c INTO DATA(ls_booking) USING KEY entity WHERE TravelId = ls_travel-TravelId.

        APPEND VALUE #( %cid = <fs_travel>-%cid && ls_booking-BookingId
                        %data = CORRESPONDING #( ls_booking EXCEPT TravelId ) )
          TO <fs_booking>-%target ASSIGNING FIELD-SYMBOL(<fs_booking_n>).
        <fs_booking_n>-BookingStatus = 'N'.

        "Fill Booking Supplement details..
        APPEND VALUE #( %cid_ref = <fs_booking_n>-%cid ) TO lt_booksuppl_cba ASSIGNING FIELD-SYMBOL(<fs_booksuupl>).
        LOOP AT lt_booksuppl_c INTO DATA(ls_suppl) USING KEY entity WHERE TravelId = ls_travel-TravelId
                                                                    AND BookingId = ls_booking-BookingId.
          APPEND VALUE #( %cid = <fs_travel>-%cid && ls_booking-BookingId && ls_suppl-BookingSupplementId
                          %data = CORRESPONDING #( ls_suppl EXCEPT TravelId BookingId ) )
            TO <fs_booksuupl>-%target.
        ENDLOOP.

      ENDLOOP.

    ENDLOOP.

    "Create Record..
    MODIFY ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    CREATE AUTO FILL CID
    FIELDS ( AgencyId CustomerId BeginDate EndDate BookingFee TotalPrice CurrencyCode TravelStatus Description )
    WITH lt_travel
    ENTITY Travel
    CREATE BY \_Booking AUTO FILL CID
    FIELDS ( BookingId BookingDate CustomerId CarrierId ConnectionId FlightDate FlightPrice CurrencyCode BookingStatus )
    WITH lt_booking_cba
    ENTITY Booking
    CREATE BY \_BookSuppl AUTO FILL CID
    FIELDS ( BookingSupplementId SupplementId Price CurrencyCode )
    WITH lt_booksuppl_cba
    MAPPED DATA(lt_mapped)
    FAILED DATA(lt_failed)
    REPORTED DATA(lt_reported).

    mapped = CORRESPONDING #( DEEP lt_mapped ).
    failed = CORRESPONDING #( DEEP lt_failed ).
    reported = CORRESPONDING #( DEEP lt_reported ).
  ENDMETHOD.

  METHOD bookingfeeDiscount.

    "Capture input
    DATA(keys_req) = keys.

    LOOP AT keys_req INTO DATA(ls_keys)
       WHERE %param-discount_percent IS INITIAL OR %param-discount_percent <= 0 OR %param-discount_percent > 100.

      "clear state message that might exist already
      APPEND VALUE #( %tky = ls_keys-%tky
                      %state_area = 'VALIDATE_DISCOUNT' ) TO reported-travel.
      "report Invalid discount
      APPEND VALUE #( %tky = ls_keys-%tky ) TO failed-travel.
      APPEND VALUE #( %tky = ls_keys-%tky
                      %msg = new_message_with_text( severity = if_abap_behv_message=>severity-error
                                                    text = 'Invalid Discount' ) ) TO reported-travel.
      DELETE keys_req.
    ENDLOOP.

    CHECK keys_req IS NOT INITIAL.

    "Get Travel instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    FIELDS ( BookingFee ) WITH CORRESPONDING #( keys_req )
    RESULT DATA(travels)
    FAILED failed
    REPORTED reported.

    "Set the discount
    MODIFY ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    UPDATE FIELDS ( BookingFee )
    WITH VALUE #( FOR ls_travel IN travels
                  FOR ls_key_temp IN keys_req WHERE ( %tky = ls_travel-%tky )
                  ( %tky = ls_travel-%tky
                    BookingFee = ls_travel-BookingFee * ( 1 - ls_key_temp-%param-discount_percent  / 100 ) )
                 )
    FAILED failed
    REPORTED reported.

    "Fill the response
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(updated).

    result = VALUE #( FOR ls_updated IN updated
                      ( %tky = ls_updated-%tky
                        %param = ls_updated ) ).

  ENDMETHOD.

  METHOD recalcTotalPrice.

    DATA(lv_curr_date) = cl_abap_context_info=>get_system_date( ).

    "Read Travel instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    FIELDS ( BookingFee CurrencyCode )
    WITH CORRESPONDING #( keys )
    RESULT DATA(travels).

    "Read Booking instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel BY \_Booking
    FIELDS ( FlightPrice CurrencyCode )
    WITH CORRESPONDING #( travels )
    RESULT DATA(bookings).

    "Read Booking Supplement instance data
    READ ENTITIES OF ZRAP_IV_TRAVEl IN LOCAL MODE
    ENTITY Booking BY \_BookSuppl
    FIELDS ( Price CurrencyCode )
    WITH CORRESPONDING #( bookings )
    RESULT DATA(booksuppls).

    "Remove instance data where currency code is empty
    DELETE travels WHERE CurrencyCode IS INITIAL.
    DELETE bookings WHERE CurrencyCode IS INITIAL.
    DELETE booksuppls WHERE CurrencyCode IS INITIAL.

    "anything left?
    CHECK travels IS NOT INITIAL.

    LOOP AT travels ASSIGNING FIELD-SYMBOL(<fs_travel>).

      "Capture Booking Fee
      CLEAR: <fs_travel>-TotalPrice.
      <fs_travel>-TotalPrice += <fs_travel>-BookingFee.

      "Capture Flight Price
      LOOP AT bookings ASSIGNING FIELD-SYMBOL(<fs_booking>).
        IF <fs_booking>-CurrencyCode = <fs_travel>-CurrencyCode.
          <fs_travel>-TotalPrice += <fs_booking>-FlightPrice.
        ELSE.

*          /dmo/cl_flight_amdp=>convert_currency(
*            EXPORTING
*              iv_amount               = <fs_booking>-FlightPrice
*              iv_currency_code_source = <fs_booking>-CurrencyCode
*              iv_currency_code_target = <fs_travel>-CurrencyCode
*              iv_exchange_rate_date   = cl_abap_context_info=>get_system_date(  )
*            IMPORTING
*              ev_amount               = DATA(lv_conv_amount)
*          ).
*          <fs_travel>-TotalPrice += lv_conv_amount.

          SELECT SINGLE FROM ztb_curr_conv FIELDS rate
          WHERE source_currency = @<fs_booking>-CurrencyCode
          AND target_currency = @<fs_travel>-CurrencyCode
          AND valid_from <= @lv_curr_date
          AND valid_to >= @lv_curr_date INTO @DATA(lv_rate_b).

          IF sy-subrc IS INITIAL.
            DATA(lv_conv_amount_b) = <fs_booking>-FlightPrice * lv_rate_b.
            <fs_travel>-TotalPrice += lv_conv_amount_b.
          ELSE.
            " Handle missing rate
          ENDIF.

          "Capture Supplement Price
          LOOP AT booksuppls ASSIGNING FIELD-SYMBOL(<fs_supplement>).
            IF <fs_supplement>-CurrencyCode = <fs_travel>-CurrencyCode.
              <fs_travel>-TotalPrice += <fs_supplement>-Price.
            ELSE.
              SELECT SINGLE FROM ztb_curr_conv FIELDS rate
              WHERE source_currency = @<fs_supplement>-CurrencyCode
              AND target_currency = @<fs_travel>-CurrencyCode
              AND valid_from <= @lv_curr_date
              AND valid_to >= @lv_curr_date INTO @DATA(lv_rate_s).

              IF sy-subrc IS INITIAL.
                DATA(lv_conv_amount_s) = <fs_supplement>-Price * lv_rate_s.
                <fs_travel>-TotalPrice += lv_conv_amount_s.
              ELSE.
                " Handle missing rate
              ENDIF.
            ENDIF.
          ENDLOOP.

        ENDIF.
      ENDLOOP.

    ENDLOOP.

    MODIFY ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    UPDATE FIELDS ( TotalPrice )
    WITH CORRESPONDING #( travels ).

  ENDMETHOD.

  METHOD GetDefaultsForCreate.
    result = VALUE #( FOR key IN keys (
                                       %cid = key-%cid
                                       %param = VALUE #( CurrencyCode = 'INR'
                                                         TravelStatus = 'O' )
                                      ) ).
  ENDMETHOD.

  METHOD calculateTotalPrice.

    MODIFY ENTITIES OF zrap_iv_travel IN LOCAL MODE
      ENTITY Travel
      EXECUTE recalcTotalPrice
      FROM CORRESPONDING #( keys )
      REPORTED DATA(updated_reported).

    reported = CORRESPONDING #( DEEP updated_reported ).

  ENDMETHOD.

  METHOD validateAgency.

    "Read Travel instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    FIELDS ( AgencyId ) WITH CORRESPONDING #( keys )
    RESULT DATA(travels).

    "extract distinct non-initial Agency Id(s)
    DATA: agencies TYPE SORTED TABLE OF /dmo/agency WITH UNIQUE KEY agency_id.
    agencies = CORRESPONDING #( travels DISCARDING DUPLICATES MAPPING agency_id = AgencyId EXCEPT * ).
    DELETE agencies WHERE agency_id IS INITIAL.

    IF agencies IS NOT INITIAL.
      "check Agency Id{s) in DB
      SELECT FROM /dmo/agency FIELDS agency_id
      FOR ALL ENTRIES IN @agencies
      WHERE agency_id = @agencies-agency_id
      INTO TABLE @DATA(agencies_db).
    ENDIF.

    "Raise message for non-existing and initial Agency Id(s)
    LOOP AT travels INTO DATA(ls_travels).
      "clear state messages that might exist
      APPEND VALUE #( %tky = ls_travels-%tky
                      %state_area = 'VALIDATE_AGENCY' ) TO reported-travel.

      IF ls_travels-AgencyID IS INITIAL OR NOT line_exists( agencies_db[ agency_id = ls_travels-AgencyId ] ).
        APPEND VALUE #( %tky = ls_travels-%tky ) TO failed-travel.
        APPEND VALUE #( %tky = ls_travels-%tky
                        %state_area = 'VALIDATE_AGENCY'
                        %msg = new_message_with_text( severity = if_abap_behv_message=>severity-error
                                                      text = 'Agency Id is not available' )
                        %element-AgencyId = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD validateCustomer.

    "Read Travel instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    FIELDS ( CustomerID ) WITH CORRESPONDING #( keys )
    RESULT DATA(travels).

    "extract distinct non-intial Customer Id(s)
    DATA: customers TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.
    customers = CORRESPONDING #( travels DISCARDING DUPLICATES MAPPING customer_id = CustomerID EXCEPT * ).
    DELETE customers WHERE customer_id IS INITIAL.

    IF customers IS NOT INITIAL.
      "check Customer Id(s) in DB
      SELECT FROM /dmo/customer FIELDS customer_id
      FOR ALL ENTRIES IN @customers
      WHERE customer_id = @customers-customer_id
      INTO TABLE @DATA(customers_db).
    ENDIF.

    "Raise message for non-existing and initial Customer Id(s)
    LOOP AT travels INTO DATA(ls_travels).
      "clear state messages that might exist
      APPEND VALUE #( %tky = ls_travels-%tky
                      %state_area = 'VALIDATE_CUSTOMER' ) TO reported-travel.

      IF ls_travels-CustomerID IS INITIAL OR NOT line_exists( customers_db[ customer_id = ls_travels-CustomerId ] ).
        APPEND VALUE #( %tky = ls_travels-%tky ) TO failed-travel.
        APPEND VALUE #( %tky = ls_travels-%tky
                        %msg = new_message_with_text( severity = if_abap_behv_message=>severity-error
                                                      text = 'Customer Id is not available' )
                        %element-CustomerId = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD validateDates.

    "Read Travel instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    FIELDS ( BeginDate EndDate ) WITH CORRESPONDING #( keys )
    RESULT DATA(travels).

    "Raise message if validation fails
    LOOP AT travels INTO DATA(ls_travels).
      "clear state message that might exist
      APPEND VALUE #( %tky = ls_travels-%tky
                      %state_area = 'VALIDATE_DATES' ) TO reported-travel.

      IF ls_travels-EndDate < ls_travels-BeginDate.
        APPEND VALUE #( %tky = ls_travels-%tky ) TO failed-travel.
        APPEND VALUE #( %tky = ls_travels-%tky
                        %msg = new_message_with_text( severity = if_abap_behv_message=>severity-error
                                                      text = 'End date is less than Begin date' )
                        %element-BeginDate = if_abap_behv=>mk-on
                        %element-EndDate = if_abap_behv=>mk-on ) TO reported-travel.
      ELSEIF ls_travels-BeginDate < cl_abap_context_info=>get_system_date(  ).
        APPEND VALUE #( %tky = ls_travels-%tky ) TO failed-travel.
        APPEND VALUE #( %tky = ls_travels-%tky
                        %msg = new_message_with_text( severity = if_abap_behv_message=>severity-error
                                                      text = 'Begin date is less than Current date' )
                        %element-BeginDate = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

CLASS lhc_booking IMPLEMENTATION.

  METHOD get_instance_features.

    "Get Booking instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Booking
    FIELDS ( BookingStatus ) WITH CORRESPONDING #( keys )
    RESULT DATA(bookings)
    FAILED failed.

    "Fill response
    result = VALUE #( FOR booking IN bookings
                      LET ls_rejected = COND #( WHEN booking-BookingStatus = 'X'
                                                THEN if_abap_behv=>fc-o-disabled
                                                ELSE if_abap_behv=>fc-o-enabled )
                      IN ( %tky = booking-%tky
                           %assoc-_BookSuppl = ls_rejected )
                    ).
  ENDMETHOD.

  METHOD calculateTotalPrice.

    "Get corresponding Travel instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Booking BY \_Travel
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(travels)
    FAILED DATA(failed).

    "Recalculate the Price
    MODIFY ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    EXECUTE recalcTotalPrice
    FROM CORRESPONDING #( travels )
    REPORTED DATA(updated_reported).

    reported = CORRESPONDING #( DEEP updated_reported ).

  ENDMETHOD.

ENDCLASS.

CLASS lhc_booksuppl IMPLEMENTATION.

  METHOD calculateTotalPrice.

    "Get corresponding Travel instance data
    READ ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY BookSuppl BY \_Travel
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(travels)
    FAILED DATA(failed).

    "Recalculate the Price
    MODIFY ENTITIES OF zrap_iv_travel IN LOCAL MODE
    ENTITY Travel
    EXECUTE recalcTotalPrice
    FROM CORRESPONDING #( travels )
    REPORTED DATA(updated_reported).

    reported = CORRESPONDING #( DEEP updated_reported ).

  ENDMETHOD.

ENDCLASS.
